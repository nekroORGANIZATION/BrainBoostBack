name: Backend → Tester (build in GitHub, run on VM)

on:
  push:
    branches: ["dev"]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: nekroorganization          # тільки нижні літери!
  IMAGE_NAME: backend               # ім'я образу в GHCR
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev                # щоб бачити GHCR_* токени з env
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (with PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_WRITE_TOKEN }}

      # Якщо Dockerfile бекенду у підтеці, заміни context: '.' та/або file: './path/Dockerfile'
      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:dev
          build-args: |
            BUILD_SHA=${{ github.sha }}

  deploy-to-tester:
    runs-on: self-hosted
    environment: dev
    needs: build-and-push
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          mkdir -p "${{ runner.temp }}"
          printf '%s\n' "${{ secrets.TARGET_SSH_KEY }}" | sed 's/\r$//' > "${{ runner.temp }}/k"
          chmod 600 "${{ runner.temp }}/k"
          ssh -i "${{ runner.temp }}/k" -p "${{ secrets.TARGET_SSH_PORT || 22 }}" -o StrictHostKeyChecking=no \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" echo ok

      - name: Login to GHCR on Tester
        shell: bash
        run: |
          ssh -i "${{ runner.temp }}/k" -p "${{ secrets.TARGET_SSH_PORT || 22 }}" -o StrictHostKeyChecking=no \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" \
            "echo '${{ secrets.GHCR_READ_TOKEN }}' | docker login ghcr.io -u '${{ secrets.GHCR_USER }}' --password-stdin"

      - name: Pull & run backend on Tester (port 8000)
        shell: bash
        env:
          IMG_SHA: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          IMG_DEV: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:dev
        run: |
          ssh -i "${{ runner.temp }}/k" -p "${{ secrets.TARGET_SSH_PORT || 22 }}" -o StrictHostKeyChecking=no \
  "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" '
    set -e

    # тягнемо образ (SHA або :dev) — як і було
    docker pull '"$IMG_SHA"' || true
    docker pull '"$IMG_DEV"' || true
    if docker image inspect '"$IMG_SHA"' >/dev/null 2>&1; then
      IMG='"$IMG_SHA"'
    else
      IMG='"$IMG_DEV"'
    fi

    # >>> ДОДАНО: підтягуємо DEV_DB_URL із файлу на ВМ
    set -a; . /opt/stacks/prod/.env; set +a   # тепер маємо $DEV_DB_URL

    # перезапуск контейнера
    docker stop brainboost-back || true
    docker rm   brainboost-back || true

    docker run -d --name brainboost-back --restart unless-stopped \
      --network prod_default \                 # >>> ДОДАНО: одна мережа з pg-app
      -p 8000:8000 \
      -e DATABASE_URL="$DEV_DB_URL" \          # >>> ДОДАНО: рядок підключення до app_dev
      -e SECRET_KEY='"'${{ secrets.SECRET_KEY }}'"' \
      -e DEBUG='"'${{ secrets.DEBUG || '1' }}'"' \
      -e ALLOWED_HOSTS='"'${{ secrets.ALLOWED_HOSTS || '127.0.0.1,localhost,172.17.10.22' }}'"' \
      -e EMAIL_HOST_USER='"'${{ secrets.EMAIL_HOST_USER || '' }}'"' \
      -e EMAIL_HOST_PASSWORD='"'${{ secrets.EMAIL_HOST_PASSWORD || '' }}'"' \
      "$IMG"

    # коротка перевірка
    for i in $(seq 1 60); do
      code="$(curl -s -m 2 -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/ || true)"
      [ -n "$code" ] && [ "$code" != "000" ] && { echo "Backend OK ($code)"; exit 0; }
      sleep 1
    done
    echo "Backend not ready, logs:"; docker logs --tail=200 brainboost-back || true; exit 1
  '
          
          
          
          
          
