name: Backend → Tester (remote build)

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: self-hosted
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set target
        run: |
          echo HOST=${{ secrets.TARGET_HOST }} >> $GITHUB_ENV
          echo USER=${{ secrets.TARGET_USER }} >> $GITHUB_ENV
          echo PORT=${{ secrets.TARGET_SSH_PORT || 22 }} >> $GITHUB_ENV

      - name: Write SSH key & test
        shell: bash
        run: |
          mkdir -p "${{ runner.temp }}"
          KEY="${{ secrets.TARGET_SSH_KEY }}"
          printf '%s\n' "$KEY" | sed 's/\r$//' > "${{ runner.temp }}/k"
          chmod 600 "${{ runner.temp }}/k"
          ssh -i "${{ runner.temp }}/k" -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" echo ok

      - name: Sync code to Tester (/opt/brainboost/src/backend)
        shell: bash
        run: |
          RSYNC_RSH="ssh -i ${{ runner.temp }}/k -p $PORT -o StrictHostKeyChecking=no"
          ssh -i "${{ runner.temp }}/k" -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "mkdir -p /opt/brainboost/src/backend"
          rsync -az --delete --exclude ".git" --exclude "node_modules" --exclude ".github" \
            -e "$RSYNC_RSH" ./ "$USER@$HOST:/opt/brainboost/src/backend/"

      - name: Remote build & up (backend)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USER }}
          key: ${{ secrets.TARGET_SSH_KEY }}
          port: ${{ env.PORT }}
          script: |
            set -euo pipefail
            cd /home/tester/BrainBoostBack

        
            docker compose -f docker-compose.dev.yml down || true

       
            docker compose -f docker-compose.dev.yml build web

           
            docker compose -f docker-compose.dev.yml up -d --force-recreate web

           
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep 8000 || true

           
            echo "Waiting for http://127.0.0.1:8000 ..."
            for i in $(seq 1 45); do        # ~90 сек
              if curl -fsS http://127.0.0.1:8000/ >/dev/null 2>&1; then
                echo "Backend is up ✅"
                exit 0
              fi
              sleep 2
            done

            echo "Backend did not become ready in time. Showing logs…"
            docker logs --tail=200 brainboostback-web-1 || true
            exit 1
