name: Backend → Tester (build in GitHub, run on VM)

on:
  push:
    branches: ["dev"]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: nekroorganization          # тільки нижні літери!
  IMAGE_NAME: backend               # ім'я образу в GHCR
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev                # щоб бачити GHCR_* токени з env
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (with PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_WRITE_TOKEN }}

      # Якщо Dockerfile бекенду у підтеці, заміни context: '.' та/або file: './path/Dockerfile'
      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:dev
          build-args: |
            BUILD_SHA=${{ github.sha }}

  deploy-to-tester:
    runs-on: self-hosted
    environment: dev
    needs: build-and-push
    steps:
    - name: Prepare SSH key
      shell: bash
      run: |
        set -e
        mkdir -p "${{ runner.temp }}"
        printf '%s\n' "${{ secrets.TARGET_SSH_KEY }}" | sed 's/\r$//' > "${{ runner.temp }}/k"
        chmod 600 "${{ runner.temp }}/k"

        ssh_port="${{ secrets.TARGET_SSH_PORT }}"
        [ -z "$ssh_port" ] && ssh_port=22

        ssh -i "${{ runner.temp }}/k" -p "$ssh_port" -o StrictHostKeyChecking=no \
          "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" echo ok

    - name: Login to GHCR on Tester
      shell: bash
      run: |
        set -e
        ssh_port="${{ secrets.TARGET_SSH_PORT }}"; [ -z "$ssh_port" ] && ssh_port=22
        ssh -i "${{ runner.temp }}/k" -p "$ssh_port" -o StrictHostKeyChecking=no \
          "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" \
          "echo '${{ secrets.GHCR_READ_TOKEN }}' | docker login ghcr.io -u '${{ secrets.GHCR_USER }}' --password-stdin"

    - name: Pull & run backend on Tester (port 8000)
      shell: bash
      env:
        IMG_SHA: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        IMG_DEV: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:dev
      run: |
        set -e
        ssh_port="${{ secrets.TARGET_SSH_PORT }}"; [ -z "$ssh_port" ] && ssh_port=22

        ssh -i "${{ runner.temp }}/k" -p "$ssh_port" -o StrictHostKeyChecking=no \
          "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" '
            set -e

            # дефолтні значення секретів
            DEBUG_VAL="${{ secrets.DEBUG }}"
            [ -z "$DEBUG_VAL" ] && DEBUG_VAL="1"

            ALLOWED_HOSTS_VAL="${{ secrets.ALLOWED_HOSTS }}"
            [ -z "$ALLOWED_HOSTS_VAL" ] && ALLOWED_HOSTS_VAL="127.0.0.1,localhost"

            EMAIL_USER_VAL="${{ secrets.EMAIL_HOST_USER }}"
            EMAIL_PASS_VAL="${{ secrets.EMAIL_HOST_PASSWORD }}"

            docker pull '"$IMG_SHA"' || true
            docker pull '"$IMG_DEV"' || true
            docker stop brainboost-back || true
            docker rm   brainboost-back || true

            if docker image inspect '"$IMG_SHA"' >/dev/null 2>&1; then
              IMG='"$IMG_SHA"'
            else
              IMG='"$IMG_DEV"'
            fi

            SECRET_KEY='"'${{ secrets.SECRET_KEY }}'"' \
            DEBUG="$DEBUG_VAL" \
            ALLOWED_HOSTS="$ALLOWED_HOSTS_VAL" \
            EMAIL_HOST_USER="$EMAIL_USER_VAL" \
            EMAIL_HOST_PASSWORD="$EMAIL_PASS_VAL" \
            docker run -d --name brainboost-back --restart unless-stopped \
              -p 8000:8000 \
              -e SECRET_KEY -e DEBUG -e ALLOWED_HOSTS \
              -e EMAIL_HOST_USER -e EMAIL_HOST_PASSWORD \
              "$IMG"
          '
