name: Backend → Tester (build in GitHub, run on VM)

on:
  push:
    branches: ["dev"]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: nekroorganization
  IMAGE_NAME: backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (with PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_WRITE_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:dev
          build-args: |
            BUILD_SHA=${{ github.sha }}

  deploy-to-tester:
    needs: build-and-push
    runs-on: self-hosted
    environment: dev
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ runner.temp }}"
          printf '%s\n' "${{ secrets.TARGET_SSH_KEY }}" | sed 's/\r$//' > "${{ runner.temp }}/k"
          chmod 600 "${{ runner.temp }}/k"

          PORT="${{ secrets.TARGET_SSH_PORT }}"
          [ -z "$PORT" ] && PORT=22

          ssh -i "${{ runner.temp }}/k" -p "$PORT" -o StrictHostKeyChecking=no \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" echo ok

      - name: Login to GHCR on Tester
        shell: bash
        run: |
          set -euo pipefail
          PORT="${{ secrets.TARGET_SSH_PORT }}"; [ -z "$PORT" ] && PORT=22
          ssh -i "${{ runner.temp }}/k" -p "$PORT" -o StrictHostKeyChecking=no \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" \
            "echo '${{ secrets.GHCR_READ_TOKEN }}' | docker login ghcr.io -u '${{ secrets.GHCR_USER }}' --password-stdin || true"

      - name: Pull & run backend on Tester (port 8000)
        shell: bash
        env:
          IMG_SHA: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          IMG_DEV: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:dev
        run: |
          set -euo pipefail
          PORT="${{ secrets.TARGET_SSH_PORT }}"; [ -z "$PORT" ] && PORT=22

          ssh -i "${{ runner.temp }}/k" -p "$PORT" -o StrictHostKeyChecking=no \
            "${{ secrets.TARGET_USER }}@${{ secrets.TARGET_HOST }}" '
              set -euo pipefail

              docker pull '"$IMG_SHA"' || true
              docker pull '"$IMG_DEV"' || true

              docker stop brainboost-back || true
              docker rm   brainboost-back || true

              if docker image inspect '"$IMG_SHA"' >/dev/null 2>&1; then
                IMG='"$IMG_SHA"'
              else
                IMG='"$IMG_DEV"'
              fi

              # дефолти для ENV робимо в shell (а не в ${{ }})
              DEBUG_VAL="${DEBUG_VAL:-'"${{ secrets.DEBUG }}"'}"
              [ -z "$DEBUG_VAL" ] && DEBUG_VAL="1"

              ALLOWED_HOSTS_VAL="${ALLOWED_HOSTS_VAL:-'"${{ secrets.ALLOWED_HOSTS }}"'}"
              [ -z "$ALLOWED_HOSTS_VAL" ] && ALLOWED_HOSTS_VAL="127.0.0.1,localhost"

              EMAIL_USER_VAL="'"${{ secrets.EMAIL_HOST_USER }}"'"
              EMAIL_PASS_VAL="'"${{ secrets.EMAIL_HOST_PASSWORD }}"'"

              SECRET_KEY="'"${{ secrets.SECRET_KEY }}"'" \
              DEBUG="$DEBUG_VAL" \
              ALLOWED_HOSTS="$ALLOWED_HOSTS_VAL" \
              EMAIL_HOST_USER="$EMAIL_USER_VAL" \
              EMAIL_HOST_PASSWORD="$EMAIL_PASS_VAL" \
              docker run -d --name brainboost-back --restart unless-stopped \
                -p 8000:8000 \
                -e SECRET_KEY -e DEBUG -e ALLOWED_HOSTS \
                -e EMAIL_HOST_USER -e EMAIL_HOST_PASSWORD \
                "$IMG"

              echo "Waiting for http://127.0.0.1:8000 ..."
              for i in $(seq 1 60); do
                code="$(curl -s -m 2 -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/ || true)"
                if [ -n "$code" ] && [ "$code" != "000" ]; then
                  echo "Backend is up (HTTP $code)"
                  exit 0
                fi
                sleep 1
              done
              echo "Backend did not become ready in time. Logs:"
              docker logs --tail=200 brainboost-back || true
              exit 1
            '
