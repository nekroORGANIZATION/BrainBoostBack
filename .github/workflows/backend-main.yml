name: Backend → Prod (build in GitHub, deploy on PROD)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: nekroorganization            # лише нижні літери
  IMAGE_NAME: backend
  IMAGE_TAG: ${{ github.sha }}        # тегуємо збирання SHA + "dev"

concurrency:
  group: backend-tester-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (write)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_WRITE_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            BUILD_SHA=${{ github.sha }}

  deploy-to-prod:
    needs: build-and-push
    runs-on: self-hosted
    environment: main
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ runner.temp }}"
          KEYFILE="${{ runner.temp }}/prod_ssh_key"
          printf '%s\n' "${{ secrets.PROD_KEY }}" | sed 's/\r$//' > "$KEYFILE"
          chmod 600 "$KEYFILE"

      - name: Smoke check SSH
        shell: bash
        run: |
          set -euo pipefail
          PORT=22
          ssh -i "${{ runner.temp }}/tester_ssh_key" -p "$PORT" -o StrictHostKeyChecking=no \
            "${{ secrets.PROD_USER }}@${{ secrets.PROD_TARGET_HOST }}" "echo connected"

      - name: Login to GHCR on Tester (read)
        shell: bash
        run: |
          set -euo pipefail
          PORT=22
          ssh -i "${{ runner.temp }}/prod_ssh_key" -p "$PORT" -o StrictHostKeyChecking=no \
            "${{ secrets.PROD_USER }}@${{ secrets.PROD_TARGET_HOST }}" \
            "echo '${{ secrets.GHCR_READ_TOKEN }}' | docker login ghcr.io -u '${{ secrets.GHCR_USER }}' --password-stdin || true"

      - name: Pull & run backend on Prod (port 8000)
        shell: bash
        env:
          IMG_SHA: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          IMG_DEV: ghcr.io/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          set -euo pipefail
          PORT=22

          ssh -i "${{ runner.temp }}/prod_ssh_key" -p "$PORT" -o StrictHostKeyChecking=no \
            "${{ secrets.PROD_USER }}@${{ secrets.PROD_TARGET_HOST }}" '
              set -euo pipefail

              # тягнемо свіже
              docker pull '"$IMG_SHA"' || true
              docker pull '"$IMG_DEV"' || true

              # зупиняємо попередній
              docker stop brainboost-back || true
              docker rm   brainboost-back || true

              # вибираємо образ: спершу точний SHA, інакше "dev"
              if docker image inspect '"$IMG_SHA"' >/dev/null 2>&1; then
                IMG='"$IMG_SHA"'
              else
                IMG='"$IMG_DEV"'
              fi

              # дефолти для ENV (щоб не падало, якщо секрет не заданий)
              DEBUG_VAL="${DEBUG_VAL:-${{ secrets.DEBUG }}}";               [ -z "${DEBUG_VAL}" ] && DEBUG_VAL="1"
              ALLOWED_HOSTS_VAL="${ALLOWED_HOSTS_VAL:-${{ secrets.ALLOWED_HOSTS }}}"; [ -z "${ALLOWED_HOSTS_VAL}" ] && ALLOWED_HOSTS_VAL="127.0.0.1,localhost"

              # запускаємо контейнер
              SECRET_KEY="'"${{ secrets.SECRET_KEY }}"'" \
              DEBUG="$DEBUG_VAL" \
              ALLOWED_HOSTS="$ALLOWED_HOSTS_VAL" \
              EMAIL_HOST_USER="'"${{ secrets.EMAIL_HOST_USER }}"'" \
              EMAIL_HOST_PASSWORD="'"${{ secrets.EMAIL_HOST_PASSWORD }}"'" \
              docker run -d --name brainboost-back --restart unless-stopped \
                -p 8000:8000 \
                -e SECRET_KEY -e DEBUG -e ALLOWED_HOSTS \
                -e EMAIL_HOST_USER -e EMAIL_HOST_PASSWORD \
                "$IMG"
            '

      - name: Cleanup SSH key
        if: always()
        run: rm -f "${{ runner.temp }}/prod_ssh_key"
