name: Backend → Prod (build in GitHub, deploy on PROD)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  OWNER: nekroorganization
  IMAGE_NAME: backend
  IMAGE_TAG: prod
  SERVICE_NAME: backend

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: main
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_WRITE_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            BUILD_SHA=${{ github.sha }}

  deploy-to-prod:
    needs: build-and-push
    runs-on: self-hosted
    environment: main
    steps:
      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ runner.temp }}"
          KEYFILE="${{ runner.temp }}/prod_ssh_key"
          # приватний ключ у багаторядковому OpenSSH форматі
          printf '%s\n' "${{ secrets.PROD_KEY }}" | sed 's/\r$//' > "$KEYFILE"
          chmod 600 "$KEYFILE"
          PORT="${{ secrets.PROD_SSH_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          echo "$PORT" > "${{ runner.temp }}/ssh_port"

      - name: Deploy via SSH
        shell: bash
        run: |
          set -euo pipefail
          KEYFILE="${{ runner.temp }}/prod_ssh_key"
          PORT="${{ secrets.PROD_SSH_PORT }}"
          [ -z "$PORT" ] && PORT=22

          # Складаємо скрипт і передаємо його на stdin віддаленому bash (жодних EOF)
          {
            echo 'set -euo pipefail'
            echo 'cd /opt/myapp'
            echo 'if [ -n "${GHCR_USER:-}" ] && [ -n "${GHCR_READ_TOKEN:-}" ]; then'
            echo '  echo "$GHCR_READ_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin || true'
            echo 'fi'
            echo 'docker compose pull "$SERVICE_NAME"'
            echo 'docker compose up -d "$SERVICE_NAME"'
            echo 'docker image prune -f'
          } | ssh -i "$KEYFILE" -p "$PORT" -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
                "${{ secrets.PROD_USER }}@${{ secrets.PROD_TARGET_HOST }}" \
                GHCR_USER='${{ secrets.GHCR_USER }}' \
                GHCR_READ_TOKEN='${{ secrets.GHCR_READ_TOKEN }}' \
                SERVICE_NAME='${{ env.SERVICE_NAME }}' \
                bash -s

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f "${{ runner.temp }}/prod_ssh_key"
